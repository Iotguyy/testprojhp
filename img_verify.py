import os
import base64
from fastapi import Form, File, UploadFile, HTTPException, Depends
from openai import OpenAI
from sqlalchemy.orm import Session
from typing import List
from datetime import datetime
from fastapi.responses import JSONResponse
import json
import ast

# Setup environment and OpenAI client
token = ""
endpoint = "https://models.inference.ai.azure.com"
model_name = "gpt-4o"
client = OpenAI(
    base_url=endpoint,
    api_key=token,
)

UPLOAD_DIR = "uploads"
os.makedirs(UPLOAD_DIR, exist_ok=True)

def get_image_data_url(image_file: str, image_format: str) -> str:
    """
    Convert an image file to a data URL string.
    
    Args:
        image_file (str): The path to the image file.
        image_format (str): The format of the image file.

    Returns:
        str: The data URL of the image.
    """
    try:
        with open(image_file, "rb") as f:
            image_data = base64.b64encode(f.read()).decode("utf-8")
    except FileNotFoundError:
        raise HTTPException(status_code=400, detail="Image file not found.")
    return f"data:image/{image_format};base64,{image_data}"









def verify_description(image_path: str, image_format: str, description: str) -> str:
    """
    Verifies if the description matches the image using OpenAI's model.

    Args:
        image_path (str): Path to the image.
        image_format (str): Format of the image (e.g., "jpg", "png").
        description (str): The description to be verified.

    Returns:
        str: Response message from the AI model about the image and description.
    """
    image_data_url = get_image_data_url(image_path, image_format)

    response = client.chat.completions.create(
    messages=[
        {
            "role": "system",
            "content": f"""You are a helpful assistant. Please analyze the provided description of the food item and determine if it accurately describes the food item in the image. 

            Provide the result in JSON format. Include only the following fields:
            - "description": The description extracted from the text.
            - "is_correct": A boolean value ("true" or "false") indicating if the description seems accurate.
            - "is_ai_generated": A boolean value ("true" or "false") indicating if the description seems AI-generated.

            The description should match the food item in the image. Please also consider whether the description seems like something generated by AI, such as being overly generic or unnatural.

            Description: {description}
            Please verify the description against the image.

            Example of the output format:
            {{
                "description": "This is a fresh apple.",
                "is_correct": true,
                "is_ai_generated": false
            }}
            """
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": f"""You are a helpful assistant. Please analyze the provided description of the food item and determine if it accurately describes the food item in the image. 

                    Provide the result in JSON format. Include only the following fields:
                    - "description": The description extracted from the text.
                    - "is_correct": A boolean value ("true" or "false") indicating if the description seems accurate.
                    - "is_ai_generated": A boolean value ("true" or "false") indicating if the description seems AI-generated.

                    The description should match the food item in the image. Please also consider whether the description seems like something generated by AI, such as being overly generic or unnatural.

                    Description: {description}
                    
                    Please verify the description against the image.

                    Example of the output format:
                    {{
                        "description": "This is a fresh apple.",
                        "is_correct": true,
                        "is_ai_generated": false
                    }}
                    """
                },
                {
                    "type": "image_url",
                    "image_url": {
                        "url": image_data_url,
                        "detail": "high"
                    },
                },
            ]
        },
    ],
    model=model_name,
)


    # Check the raw response content
    response_json = response.choices[0].message.content
    print("Response from OpenAI:", response_json)

    # Use json.loads to parse the string into a dictionary
    try:
        details_dict = json.loads(response_json)  # Parse string as JSON
        print(details_dict)
        print(type(details_dict))
        print("Parsed response as dictionary:", details_dict)
        return details_dict  # Return parsed dictionary
    except json.JSONDecodeError as e:
        print("JSON Decode Error:", e)
        print("Response content:", response_json)
        return {"error": "Failed to decode response."}












# Verification function to send data to OpenAI
# def verify_description(image_path: str, image_format: str, description: str) -> str:
#     """
#     Verifies if the description matches the image using OpenAI's model.

#     Args:
#         image_path (str): Path to the image.
#         image_format (str): Format of the image (e.g., "jpg", "png").
#         description (str): The description to be verified.

#     Returns:
#         str: Response message from the AI model about the image and description.
#     """
#     image_data_url = get_image_data_url(image_path, image_format)

#     response = client.chat.completions.create(
#         messages=[
#             {
#                 "role": "system",
#                 "content": f"""You are a helpful assistant. Please analyze the provided description of the food item and determine if it seems like a real and accurate description or if it appears to be AI-generated. 

#                 Provide the result in JSON format. Include only the following fields:
#                 - "description": The description extracted from the text.
#                 - "is_correct": A boolean value ("true" or "false") indicating if the description seems accurate.
#                 - "is_ai_generated": A boolean value ("true" or "false") indicating if the description seems AI-generated.

#                 Description: {description}. Please verify

#                 Example of the output format:
#                 {{
#                     "description": "This is a fresh apple.",
#                     "is_correct": true,
#                     "is_ai_generated": false
#                 }}
#                 """

#             },
#             {
#                 "role": "user",
#                 "content": [
#                     {
#                         "type": "text",
#                         "text": f"""You are a helpful assistant. Please analyze the provided description of the food item and determine if it seems like a real and accurate description or if it appears to be AI-generated. 

#                 Provide the result in JSON format. Include only the following fields:
#                 - "description": The description extracted from the text.
#                 - "is_correct": A boolean value ("true" or "false") indicating if the description seems accurate.
#                 - "is_ai_generated": A boolean value ("true" or "false") indicating if the description seems AI-generated.

#                 Description: {description}. Please verify

#                 Example of the output format:
#                 {{
#                     "description": "This is a fresh apple.",
#                     "is_correct": true,
#                     "is_ai_generated": false
#                 }}
#                 """
#                     },
#                     {
#                         "type": "image_url",
#                         "image_url": {
#                             "url": image_data_url,
#                             "detail": "high"
#                         },
#                     },
#                 ]
#             },
#         ],
#         model=model_name,
#     )

#     # Parse the response to extract the keys in JSON format
#     response_json = response.choices[0].message.content

#     # Print the response JSON keys
#     # print("Response Keys:", response_json.keys())
#     print(response_json)
#     print(type(response_json))

#     if isinstance(response_json, str):
#         details_dict = json.loads(response_json)

#     for key,value in details_dict.items():
#         print(key,value)

#     # response_dict = ast.literal_eval(response_json)
#     # print("Parsed response as dictionary:", response_dict)

#     return response_json



#     # response = client.chat.completions.create(
#     #     messages=[
#     #         {
#     #             "role": "system",
#     #             "content": "You are a helpful assistant that verifies image descriptions.",
#     #         },
#     #         {
#     #             "role": "user",
#     #             "content": [
#     #                 {
#     #                     "type": "text",
#     #                     "text": f"Does this description match the image? Description: {description}",
#     #                 },
#     #                 {
#     #                     "type": "image_url",
#     #                     "image_url": {
#     #                         "url": image_data_url,
#     #                         "detail": "high"  # Can adjust this detail level
#     #                     },
#     #                 },
#     #             ],
#     #         },
#     #     ],
#     #     model=model_name,
#     # )

#     # return response.choices[0].message.content

